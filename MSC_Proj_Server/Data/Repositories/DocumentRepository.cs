using Microsoft.EntityFrameworkCore;
using WebAPI_Vue_Equipment_Manager_App.Server.Application.Error_Handling;
using WebAPI_Vue_Equipment_Manager_App.Server.Data.Entities;

namespace WebAPI_Vue_Equipment_Manager_App.Server.Data.Repositories
{
    public class DocumentRepository
    {
        private readonly MainDbContext _context;

        public DocumentRepository(MainDbContext context)
        {
            _context = context;
        }

        public async Task<Document> AddDocumentAsync(Document document)
        {
            var result = _context.Documents.Add(document);
            await _context.SaveChangesAsync();
            return result.Entity;
        }

        //Fix to allow related entities to be added together before their PKs have been generated by the database
        //https://stackoverflow.com/questions/17523568/entity-framework-retrieve-id-before-savechanges-inside-a-transaction
        public async Task<ItemDocument> AddItemDocument(Document document, int itemId)
        {        
           _context.Add(document);
           var itemDoc = new ItemDocument { DocumentId = document.Id, ItemId = itemId };
           itemDoc.Document = document;
           _context.Add(itemDoc);
           await _context.SaveChangesAsync();
           return itemDoc;
        }

        public async Task<EquipmentModelDocument> AddModelDocument(Document document, int modelId)
        {
            var doc = _context.Documents.Add(document);
            var modelDoc = new EquipmentModelDocument { DocumentId = doc.Entity.Id, ModelId = modelId };
            modelDoc.Document = document;
            _context.ModelDocuments.Add(modelDoc);
            await _context.SaveChangesAsync();
            return modelDoc;
        }
        public async Task<MaintenanceDocument> AddMaintenanceDocument(Document document, int maintenanceId)
        {
            _context.Add(document);
            var mainDoc = new MaintenanceDocument { DocumentId = document.Id, MaintenanceId = maintenanceId };
            mainDoc.Document = document;
           _context.Add(mainDoc);
            await _context.SaveChangesAsync();
            return mainDoc;
        }

        public async Task DeleteDocument(Document document)
        {
            _context.Documents.Remove(document);
            await _context.SaveChangesAsync();
        }
        public async Task DeleteDocument(string uri)
        {
            var document = await _context.Documents.
                Where(x => x.URL == uri).
                FirstAsync();
            _context.Documents.Remove(document);
            await _context.SaveChangesAsync();
        }

        public async Task<IEnumerable<ItemDocument>> GetAllDocumentsForItem(int itemId)
        {
            var documents = await _context.ItemDocuments.
                Where(x => x.ItemId == itemId).
                Include(x => x.Document).
                ToListAsync();
            return documents;
        }
        public async Task<IEnumerable<EquipmentModelDocument>> GetAllDocumentsForModel(int modelId)
        {
            var documents = await _context.ModelDocuments.
                Where(x => x.ModelId == modelId).
                Include(x => x.Document).
                ToListAsync();
            return documents;
        }
        public async Task<IEnumerable<MaintenanceDocument>> GetAllDocumentsForMaintenance(int maintenanceId)
        {
            var documents = await _context.MaintenanceDocuments.
                Where(x => x.MaintenanceId == maintenanceId).
                Include(x => x.Document).
                ToListAsync();
            return documents;
        }
        public async Task<IEnumerable<MaintenanceDocument>> GetAllDocumentsForMaintenance(IEnumerable<int> maintenanceIds)
        {
            var documents = await _context.MaintenanceDocuments.
                Where(x => maintenanceIds.Contains(x.MaintenanceId)).
                Include(x => x.Document).
                ToListAsync();
            return documents;
        }


        public async Task<IEnumerable<string>> GetOrphanedDocuments(IEnumerable<string> documentURLs)
        {
            var orphans = await _context.Documents.
                Select(x => x.URL).
                Except(documentURLs).
                ToListAsync();
            return orphans;
        }




    }
}
